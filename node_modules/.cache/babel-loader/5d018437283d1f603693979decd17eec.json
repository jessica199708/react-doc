{"ast":null,"code":"var _jsxFileName = \"/Users/jia/Desktop/react-doc/src/App.js\";\n// import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react'; // App.js is normal javascript file which has JSX code inside render function. \n// The name App is user-defined you can keep any name but remember to save as .js file.\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h1>Hello World!</h1>\n//       </div>\n//     );\n//   }\n// }\n// export default App;\n// function formatName(user) {\n//   return user.firstName + ' ' + user.lastName\n// }\n// // export function component\n// export function myelement(user) {   \n//   if (user) {\n//     return <h1>hello, {formatName(user)}</h1>\n//   } else {\n//     return <h1>hello, starnger</h1>\n//   }\n// }\n// class App extends Component {\n// state = {\n//   name: 'rose',\n//   age: 0,\n// };\n// 多次setState函数方式（preState拿到了上次setState之后的结果，作为参数传递给下一个setState，从感觉上像是立马更新了state）不合并\n// click = () => {\n//   console.log('start!')\n//   this.setState((preState) => {\n//     console.log('pre1:', preState)\n//     return { name: 'name1', age: preState.age + 1 }\n//   })\n//   this.setState((preState) => {\n//     console.log('pre2:', preState)\n//     return { name: 'name2', age: preState.age + 1 }\n//   })\n//   this.setState((preState) => {\n//     console.log('pre3:', preState)\n//     return { name: 'name3', age: preState.age + 1 }\n//   })\n//   console.log('end!')\n// };\n// 多次setState对象方式（每次setState都执行，执行后没有立马更新this.state,每次setState里取得this.state的值都是最初的值）合并\n// click = () => {\n//   console.log('start')\n//   this.setState((state) => ({ name: 'name1', age: state.age + 1 }))\n//   this.setState((state) => ({ name: 'name2', age: state.age + 1 }))\n//   this.setState((state) => ({ name: 'name3', age: state.age + 1 }))  // setState触发但是没有render\n//   this.setState((state) => ({ name: 'name4', age: state.age + 1 }))   // age：5/10/15...\n//   // this.setState({ name: 'name6', age: this.state.age + 1 })   // age: 2/4/6...   从这之后开始算（name4+name5） 0+1+1 = 2\n//   this.setState((state) => ({ name: 'name5', age: state.age + 1 }))\n//   console.log('end')\n// };\n// state = {\n//   count: 0\n// }\n// click = () => {\n//   this.setState({ count: this.state.count + 1 });\n//   console.log(\"console: \" + this.state.count); // count: 0   第一步\n//   this.setState({ count: this.state.count + 1 }, () => {   // count: 1   第二步\n//     console.log(\"console from callback: \" + this.state.count); // count: 2   第五步\n//   });\n//   this.setState(prevState => {\n//     console.log(\"console from func: \" + prevState.count); // count: 1  第三步\n//     return {\n//       count: prevState.count + 1  // count:2  第四步  \n//     };\n//   }, () => {\n//     console.log('last console: ' + this.state.count) // count:2  第六步  \n//   });\n// }\n// render() {\n//   const { count } = this.state\n//   return (\n//     <div>\n//       <span>{count}</span>\n//       <button id='btn' onClick={this.click}>click me!</button>\n//     </div>\n//   )\n// }\n// render() {\n//   console.log('render...', this.state);\n//   const { name, age } = this.state;\n//   return (\n//     <div>\n//       <span>{name + '---' + age}</span>\n//       <button id='btn' onClick={this.click}>click me!</button>\n//     </div>\n//   )\n// }\n// }\n// export default App;\n// function BoilingVerdict(props) {\n//   if (props.celsius >= 100) {\n//     return <p>The water would boil.</p>\n//   } else {\n//     return <p>The water would not boil.</p>\n//   }\n// }\n// const tempType = {\n//   c: 'Celsius',\n//   f: 'Fahrenheit'\n// }\n// function toCelsius(fahrenheit) {\n//   return (fahrenheit - 32) * 5 / 9;\n// }\n// function toFahrenheit(celsius) {\n//   return (celsius * 9 / 5) + 32;\n// }\n// function convert(temperature, func) {\n//   const input = parseFloat(temperature)\n//   if (Number.isNaN(input)) {\n//     return ''\n//   }\n//   const output = func(input)\n//   const rounded = Math.round(output * 1000) / 1000\n//   return rounded.toString()\n// }\n// class TemperatureInput extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.handleChange = this.handleChange.bind(this)\n//   }\n//   handleChange(e) {\n//     //this.setState({ temperature: e.target.value })\n//     this.props.onTemperatureChange(e.target.value)\n//   }\n//   render() {\n//     const type = this.props.type\n//     const temperature = this.props.temperature\n//     return (\n//       <fieldset>\n//         <legend>Enter temperature in :{tempType[type]}</legend>\n//         <input\n//           value={temperature}\n//           onChange={this.handleChange}>\n//         </input>\n//       </fieldset>\n//     )\n//   }\n// }\n// class Calculator extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = { temperature: '', type: 'c' }\n//     this.handleCelsiusChange = this.handleCelsiusChange.bind(this)\n//     this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this)\n//   }\n//   handleCelsiusChange(temperature) {\n//     console.log(temperature)\n//     this.setState({ temperature, type: 'c' })\n//   }\n//   handleFahrenheitChange(temperature) {\n//     this.setState({ temperature, type: 'f' })\n//   }\n//   render() {\n//     const type = this.state.type\n//     const temperature = this.state.temperature\n//     const celsius = type === 'f' ? convert(temperature, toCelsius) : temperature\n//     const fahrenheit = type === 'c' ? convert(temperature, toFahrenheit) : temperature\n//     return (\n//       <div>\n//         <TemperatureInput \n//           type='c'\n//           temperature={celsius} // 温度转换\n//           onTemperatureChange={this.handleCelsiusChange} />  \n//           {/* 写进< >里的是要传递给子组件的props，props的名字父子组件之间要一样 */}\n//         <TemperatureInput \n//           type='f'\n//           temperature={fahrenheit} \n//           onTemperatureChange={this.handleFahrenheitChange} />\n//         <BoilingVerdict celsius={parseFloat(celsius)}/>\n//       </div>\n//     )\n//   }\n// }\n// export default Calculator\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Demo extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isHot: true\n    };\n\n    this.showInfo = () => {\n      const {\n        input1\n      } = this;\n      alert(input1.value);\n    };\n\n    this.changeWeather = () => {\n      const {\n        isHot\n      } = this.state;\n      this.setState({\n        isHot: false\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Today is \", isHot ? 'hot' : 'cold']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: currentNode => {\n          this.input1 = currentNode;\n          console.log(currentNode);\n        },\n        type: \"text\",\n        placeholder: \"Click button show data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.showInfo,\n        children: \"Click to show left data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.changeWeather,\n        children: \"Click to change weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Demo;","map":{"version":3,"sources":["/Users/jia/Desktop/react-doc/src/App.js"],"names":["React","Component","Demo","state","isHot","showInfo","input1","alert","value","changeWeather","setState","render","currentNode","console","log"],"mappings":";AAAA;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjmBF,KAAK,CAACC,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAWjCE,KAXiC,GAWzB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAXyB;;AAAA,SAYjCC,QAZiC,GAYtB,MAAM;AACf,YAAM;AAAEC,QAAAA;AAAF,UAAa,IAAnB;AACAC,MAAAA,KAAK,CAACD,MAAM,CAACE,KAAR,CAAL;AACD,KAfgC;;AAAA,SAgBjCC,aAhBiC,GAgBjB,MAAM;AACpB,YAAM;AAAEL,QAAAA;AAAF,UAAY,KAAKD,KAAvB;AACA,WAAKO,QAAL,CAAc;AAAEN,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD,KAnBgC;AAAA;;AAoBjCO,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA,gCAAcP,KAAK,GAAG,KAAH,GAAW,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,GAAG,EAAGQ,WAAD,IAAiB;AAAE,eAAKN,MAAL,GAAcM,WAAd;AAA2BC,UAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AAA0B,SAApF;AAAsF,QAAA,IAAI,EAAC,MAA3F;AAAkG,QAAA,WAAW,EAAC;AAA9G;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,KAAKP,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAKE;AAAQ,QAAA,OAAO,EAAE,KAAKI,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AA9BgC;;AAiCnC,eAAeP,IAAf","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react';\n// App.js is normal javascript file which has JSX code inside render function. \n// The name App is user-defined you can keep any name but remember to save as .js file.\n\n\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h1>Hello World!</h1>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\n\n\n// function formatName(user) {\n//   return user.firstName + ' ' + user.lastName\n// }\n\n// // export function component\n// export function myelement(user) {   \n//   if (user) {\n//     return <h1>hello, {formatName(user)}</h1>\n//   } else {\n//     return <h1>hello, starnger</h1>\n//   }\n// }\n\n\n// class App extends Component {\n// state = {\n//   name: 'rose',\n//   age: 0,\n// };\n\n// 多次setState函数方式（preState拿到了上次setState之后的结果，作为参数传递给下一个setState，从感觉上像是立马更新了state）不合并\n\n// click = () => {\n//   console.log('start!')\n\n//   this.setState((preState) => {\n//     console.log('pre1:', preState)\n//     return { name: 'name1', age: preState.age + 1 }\n//   })\n\n//   this.setState((preState) => {\n//     console.log('pre2:', preState)\n//     return { name: 'name2', age: preState.age + 1 }\n//   })\n\n//   this.setState((preState) => {\n//     console.log('pre3:', preState)\n//     return { name: 'name3', age: preState.age + 1 }\n//   })\n\n\n//   console.log('end!')\n// };\n\n// 多次setState对象方式（每次setState都执行，执行后没有立马更新this.state,每次setState里取得this.state的值都是最初的值）合并\n\n// click = () => {\n//   console.log('start')\n//   this.setState((state) => ({ name: 'name1', age: state.age + 1 }))\n//   this.setState((state) => ({ name: 'name2', age: state.age + 1 }))\n//   this.setState((state) => ({ name: 'name3', age: state.age + 1 }))  // setState触发但是没有render\n//   this.setState((state) => ({ name: 'name4', age: state.age + 1 }))   // age：5/10/15...\n//   // this.setState({ name: 'name6', age: this.state.age + 1 })   // age: 2/4/6...   从这之后开始算（name4+name5） 0+1+1 = 2\n//   this.setState((state) => ({ name: 'name5', age: state.age + 1 }))\n//   console.log('end')\n// };\n\n// state = {\n//   count: 0\n// }\n// click = () => {\n//   this.setState({ count: this.state.count + 1 });\n//   console.log(\"console: \" + this.state.count); // count: 0   第一步\n//   this.setState({ count: this.state.count + 1 }, () => {   // count: 1   第二步\n//     console.log(\"console from callback: \" + this.state.count); // count: 2   第五步\n//   });\n//   this.setState(prevState => {\n//     console.log(\"console from func: \" + prevState.count); // count: 1  第三步\n//     return {\n//       count: prevState.count + 1  // count:2  第四步  \n//     };\n//   }, () => {\n//     console.log('last console: ' + this.state.count) // count:2  第六步  \n//   });\n\n// }\n// render() {\n//   const { count } = this.state\n//   return (\n//     <div>\n//       <span>{count}</span>\n//       <button id='btn' onClick={this.click}>click me!</button>\n//     </div>\n//   )\n// }\n\n\n// render() {\n//   console.log('render...', this.state);\n//   const { name, age } = this.state;\n//   return (\n//     <div>\n//       <span>{name + '---' + age}</span>\n//       <button id='btn' onClick={this.click}>click me!</button>\n//     </div>\n//   )\n// }\n// }\n\n// export default App;\n\n// function BoilingVerdict(props) {\n//   if (props.celsius >= 100) {\n//     return <p>The water would boil.</p>\n//   } else {\n//     return <p>The water would not boil.</p>\n//   }\n// }\n\n// const tempType = {\n//   c: 'Celsius',\n//   f: 'Fahrenheit'\n// }\n\n// function toCelsius(fahrenheit) {\n//   return (fahrenheit - 32) * 5 / 9;\n// }\n\n// function toFahrenheit(celsius) {\n//   return (celsius * 9 / 5) + 32;\n// }\n\n// function convert(temperature, func) {\n//   const input = parseFloat(temperature)\n//   if (Number.isNaN(input)) {\n//     return ''\n//   }\n//   const output = func(input)\n//   const rounded = Math.round(output * 1000) / 1000\n//   return rounded.toString()\n// }\n\n// class TemperatureInput extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.handleChange = this.handleChange.bind(this)\n//   }\n//   handleChange(e) {\n//     //this.setState({ temperature: e.target.value })\n//     this.props.onTemperatureChange(e.target.value)\n//   }\n//   render() {\n//     const type = this.props.type\n//     const temperature = this.props.temperature\n//     return (\n//       <fieldset>\n//         <legend>Enter temperature in :{tempType[type]}</legend>\n//         <input\n//           value={temperature}\n//           onChange={this.handleChange}>\n//         </input>\n//       </fieldset>\n//     )\n//   }\n// }\n\n\n// class Calculator extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = { temperature: '', type: 'c' }\n//     this.handleCelsiusChange = this.handleCelsiusChange.bind(this)\n//     this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this)\n//   }\n//   handleCelsiusChange(temperature) {\n//     console.log(temperature)\n//     this.setState({ temperature, type: 'c' })\n//   }\n//   handleFahrenheitChange(temperature) {\n//     this.setState({ temperature, type: 'f' })\n//   }\n//   render() {\n//     const type = this.state.type\n//     const temperature = this.state.temperature\n//     const celsius = type === 'f' ? convert(temperature, toCelsius) : temperature\n//     const fahrenheit = type === 'c' ? convert(temperature, toFahrenheit) : temperature\n//     return (\n//       <div>\n//         <TemperatureInput \n//           type='c'\n//           temperature={celsius} // 温度转换\n//           onTemperatureChange={this.handleCelsiusChange} />  \n//           {/* 写进< >里的是要传递给子组件的props，props的名字父子组件之间要一样 */}\n//         <TemperatureInput \n//           type='f'\n//           temperature={fahrenheit} \n//           onTemperatureChange={this.handleFahrenheitChange} />\n//         <BoilingVerdict celsius={parseFloat(celsius)}/>\n//       </div>\n\n//     )\n//   }\n// }\n// export default Calculator\n\n\nclass Demo extends React.Component {\n\n  // showData = () => {  \n  //   const {input1} = this\n  //   alert(input1.value)\n  // }\n  // showData2 =() => {\n  //   const {input2} = this\n  //   alert(input2.value)\n\n  // }\n  state = { isHot: true }\n  showInfo = () => {\n    const { input1 } = this\n    alert(input1.value)\n  }\n  changeWeather = () => {\n    const { isHot } = this.state\n    this.setState({ isHot: false })\n  }\n  render() {\n    return (\n      <div>\n        <h2>Today is {isHot ? 'hot' : 'cold'}</h2>\n        <input ref={(currentNode) => { this.input1 = currentNode; console.log(currentNode) }} type='text' placeholder='Click button show data' />\n        <button onClick={this.showInfo}>Click to show left data</button>\n        {/* <input ref={(currentNode)=>{this.input2 = currentNode}} onBlur={this.showData2} type='text' placeholder='Loss focus' /> */}\n        <button onClick={this.changeWeather}>Click to change weather</button>\n      </div>\n    )\n  }\n}\n\nexport default Demo"]},"metadata":{},"sourceType":"module"}